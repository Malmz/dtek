import { SQL } from 'sql-template-strings';
import { PostgresDb } from 'fastify-postgres';
import { Lunch, News } from './types.js';

/* export async function init(db: PostgresDb) {
  await db.query(SQL`
    CREATE TABLE IF NOT EXISTS posts (
      id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
      title text NOT NULL,
      body text NOT NULL,
      published timestamp with time zone NOT NULL DEFAULT timezone('utc'::text, now()),
      place text,
      startDate timestamp with time zone,
      endDate timestamp with time zone
    )
  `);

  await db.query(SQL`
    CREATE TABLE IF NOT EXISTS lunch (
      id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
      resturant VARCHAR(255) NOT NULL,
      date timestamp with time zone NOT NULL,
      lang VARCHAR(80),
      preformatted boolean NOT NULL DEFAULT false,
      title text,
      body text NOT NULL
    )
  `);
} */

export async function fetchNews(db: PostgresDb): Promise<News[]> {
  const result = await db.query<News>(SQL`SELECT * FROM posts`);
  return result.rows;
}

export async function createNews(db: PostgresDb, news: News): Promise<void> {
  await db.query(SQL`
    INSERT INTO posts (title, body, place, "startDate", "endDate")
    VALUES (${news.title}, ${news.body}, ${news.place}, ${news.startDate}, ${news.endDate})
  `);
}

export async function createLunch(
  db: PostgresDb,
  resturant: string,
  date: Date,
  lang: 'Swedish' | 'English',
  lunch: Lunch
): Promise<void> {
  if (lunch.preformatted) {
    await db.query(SQL`
      INSERT INTO lunch (resturant, date, lang, preformatted, body)
      VALUES (${resturant}, ${date}, ${lang}, ${true}, ${lunch.preformatted})
    `);
  } else if (lunch.dishes) {
    const query = SQL`INSERT INTO lunch (resturant, date, lang, title, body)`;
    lunch.dishes.forEach((dish) => {
      query.append(
        SQL`VALUES (${resturant}, ${date}, ${lang}, ${dish.title}, ${dish.body})`
      );
    });
    await db.query(query);
  }
}

export async function fetchLunch(
  db: PostgresDb,
  resturant: string,
  date: Date,
  lang = 'Swedish'
): Promise<Lunch> {
  const result = await db.query<{
    preformatted: boolean;
    title?: string;
    body: string;
  }>(SQL`
      SELECT preformatted, title, body
      FROM lunch
      WHERE resturant = ${resturant} AND date = ${date} AND lang = ${lang}
    `);

  const data = result.rows;

  if (data.length === 0) {
    throw new Error('No lunch found');
  } else if (data.length === 1 && data[0].preformatted) {
    return {
      preformatted: data[0].body,
    };
  } else {
    return {
      dishes: data.map(({ title, body }) => ({
        title,
        body,
      })),
    };
  }
}
